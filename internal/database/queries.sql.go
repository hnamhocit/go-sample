// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO
	users (display_name, email, password)
VALUES
	(?, ?, ?)
`

type CreateUserParams struct {
	DisplayName string
	Email       string
	Password    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.DisplayName, arg.Email, arg.Password)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE
	id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
	id, display_name, email, password, refresh_token, role, created_at, updated_at, bio, photo_url, background_url
FROM
	users
WHERE
	id = ?
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Email,
		&i.Password,
		&i.RefreshToken,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Bio,
		&i.PhotoUrl,
		&i.BackgroundUrl,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
	id, display_name, email, password, refresh_token, role, created_at, updated_at, bio, photo_url, background_url
FROM
	users
WHERE
	email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Email,
		&i.Password,
		&i.RefreshToken,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Bio,
		&i.PhotoUrl,
		&i.BackgroundUrl,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT
	id, display_name, email, password, refresh_token, role, created_at, updated_at, bio, photo_url, background_url
FROM
	users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.DisplayName,
			&i.Email,
			&i.Password,
			&i.RefreshToken,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Bio,
			&i.PhotoUrl,
			&i.BackgroundUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :execresult
UPDATE users
SET
	display_name = COALESCE(?, display_name),
	email = COALESCE(?, email),
	password = COALESCE(?, password),
	refresh_token = COALESCE(?, refresh_token)
WHERE
	id = ?
`

type UpdateUserParams struct {
	DisplayName  string
	Email        string
	Password     string
	RefreshToken sql.NullString
	ID           int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUser,
		arg.DisplayName,
		arg.Email,
		arg.Password,
		arg.RefreshToken,
		arg.ID,
	)
}
