// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type UsersRole string

const (
	UsersRoleUSER  UsersRole = "USER"
	UsersRoleADMIN UsersRole = "ADMIN"
)

func (e *UsersRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersRole(s)
	case string:
		*e = UsersRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersRole: %T", src)
	}
	return nil
}

type NullUsersRole struct {
	UsersRole UsersRole `json:"users_role"`
	Valid     bool      `json:"valid"` // Valid is true if UsersRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersRole) Scan(value interface{}) error {
	if value == nil {
		ns.UsersRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersRole), nil
}

type User struct {
	ID            int32          `json:"id"`
	DisplayName   string         `json:"display_name"`
	Email         string         `json:"email"`
	Password      string         `json:"password"`
	RefreshToken  sql.NullString `json:"refresh_token"`
	Bio           sql.NullString `json:"bio"`
	PhotoUrl      sql.NullString `json:"photo_url"`
	BackgroundUrl sql.NullString `json:"background_url"`
	Role          UsersRole      `json:"role"`
	TokenVersion  int32          `json:"token_version"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
}
